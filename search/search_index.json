{
    "docs": [
        {
            "location": "/", 
            "text": "FHIRcast - \nmodern, simple application context synchronization\n\n\nOverview\n\n\nFHIRcast synchronizes healthcare applications in real time to show the same clinical content to a common user. For example, a radiologist often works in three disparate applications at the same time (a radiology information system, a PACS and a dictation system), she wants each of these three systems to display the same study or patient at the same time. FHIRcast isn't limited to radiology use-cases. Modeled after the common webhook design pattern and specifically the \nW3C WebSub RFC\n, FHIRcast naturally extends the SMART on FHIR launch protocol to achieve tight integration between disparate, full-featured applications. FHIRcast builds on the \nCCOW\n abstract model to specify an http-based and simple context synchronization specification that doesn't require a separate context manager. \n\n\nAdopting the WebSub terminology, the below describes an app as a subscriber synchronizing with an EHR in the role of a hub, but any user-facing application can synchronize with FHIRcast. While less common,  bidirectional communication between multiple applications is also possible.\n\n\nWhy?\n\n\nThe large number of vendor-specific or proprietary context synchronization methods in production limit the industry's ability to enhance the very large number of integrations currently in production. In practice, these integrations are decentralized and simple. \n\n\nSynchronize\n\n\nAn app subscribes to specific workflow events for a given user's session, the subscription is verified and the app is then notified when those workflow events occur; for example, by the clinician opening a patient's chart. The app deletes its subscription when it no longer wants to receive notifications.\n[TODO: Simple, attractive image illustrating actors and key interactions]\n\n\nEHR launches SMART on FHIR App\n\n\nThe EHR launches the app following the standard \nSMART on FHIR EHR launch\n flow, including identifying the current EHR user using OpenID Connect. As part of the app launch, in response to a request for the \nfhircast\n OAuth2.0 scope , the EHR's authorization server identifies the base url to the hub, and a unique, opaque identifier to the current user's session. Other launch scenarios are also supported, see \nLaunch Scenarios\n.\n\n\nSMART launch parameters include hub base url and session identifier\n\n\n{\n  \naccess_token\n: \ni8hweunweunweofiwweoijewiwe\n,\n  \ntoken_type\n: \nbearer\n,\n  \nexpires_in\n: 3600,\n  \npatient\n:  \n123\n,\n  \nencounter\n: \n456\n,\n  \nimagingstudy\n: \n789\n,\n  \ncast-hub\n : \nhttps://hub.example.com\n,\n  \ncast-session\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n}\n\n\n\n\nAlthough FHIRcast works best with the SMART on FHIR launch and authorization process, it can also be used with implementation-specific launch and authz protocols. See \nother launch scenarios\n.\n\n\nApp subscribes to session\n\n\nIn this example, the app asks to be notified of the open-patient-chart and close-patient-chart events.  Note that the bearer access_token used to authenticate to the Hub was initially granted during the SMART launch.\n\n\nSubscriber performs an HTTP POST to the hub base url with the following parameters.\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.callback\n\n\nRequired\n\n\nstring\n\n\nThe Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription.\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request.\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from.\n\n\n\n\n\n\nhub.secret\n\n\nRequired\n\n\nstring\n\n\nA subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest delivered in each notification. This parameter MUST be less than 200 bytes in length.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nComma-separated list of event types from the Event Catalog for which the Subscriber wants notifications.\n\n\n\n\n\n\nhub.lease_seconds\n\n\nOptional\n\n\nnumber\n\n\nNumber of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter.\n\n\n\n\n\n\n\n\nHubs MUST allow subscribers to re-request subscriptions that are already activated. Each subsequent request to a hub to subscribe or unsubscribe MUST override the previous subscription state for a specific topic, and callback URL combination once the action is verified. \n\n\nThe callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar\nred=fish). Hubs MUST preserve the query string during subscription verification by appending new parameters to the end of the list using the \n (ampersand) character to join. When sending the content distribution request, the hub will make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters.\n\n\nPOST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a\nhub.mode=subscribe\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.secret=shhh-this-is-a-secret\nhub.events=patient-open-chart,patient-close-chart\n\n\n\n\nNote: Within FHIRcast, the client that creates a subscription and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems. \n\n\nHub responds with successful creation\n\n\nIf the hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, it MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the hub. The hub SHOULD perform the verification of intent as soon as possible.\n\n\nIf a hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, hubs SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.\n\n\nHTTP/1.1 202 Accepted\n\n\n\n\nHub may cancel subscription\n\n\nIf (and when) the subscription is denied, the hub MUST inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended.\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"denied\".\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic uri given in the corresponding subscription request.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nA comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.\n\n\n\n\n\n\nhub.reason\n\n\nOptional\n\n\nstring\n\n\nThe hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.\n\n\n\n\n\n\n\n\nGET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.events=open-patient-chart,close-patient-chart\nhub.challenge=meu3we944ix80ox\nhub.reason=session+unexpectedly+stopped HTTP 1.1\nHost: subscriber\n\n\n\n\nHub verifies callback url\n\n\nIf (and when) the subscription is accepted, the hub MUST perform the verification of intent of the subscriber. The hub.callback url verification process ensures that the subscriber actually controls the callback url.\n\n\nIn order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a hub must ensure that the subscriber did indeed send the subscription request. The hub verifies a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended:\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber.\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session uri given in the corresponding subscription request.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nA comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.\n\n\n\n\n\n\nhub.challenge\n\n\nRequired\n\n\nstring\n\n\nA hub-generated, random string that MUST be echoed by the subscriber to verify the subscription.\n\n\n\n\n\n\nhub.lease_seconds\n\n\nRequired\n\n\nnumber\n\n\nThe hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the hub to the subscriber. Subscribers must renew their subscription before the lease seconds period is over to avoid interruption.\n\n\n\n\n\n\n\n\nGET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe\nhub.topic=7jaa86kgdudewiaq0wtu\nhub.events=open-patient-chart,close-patient-chart\nhub.challenge=meu3we944ix80ox HTTP 1.1\nHost: subscriber\n\n\n\n\nThe subscriber MUST confirm that the hub.topic corresponds to a pending subscription or unsubscription that it wishes to carry out. If so, the subscriber MUST respond with an HTTP success (2xx) code with a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber MUST respond with a 404 \"Not Found\" response.\n\n\nHTTP/1.1 200 Success\nContent-Type: text/html\n\nmeu3we944ix80ox\n\n\n\n\nThe hub MUST consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the hub MUST also consider verification to have failed.\n\n\nApp may request current context\n\n\nFollowing a launch, in addition to subscribing for future events, a client may request the current context of a given session. The client queries the Hub's topic url to check the current context for the session represented by the topic. Event-driven context notifications should take precedence. Note that no \nhub.event\n is present in the response.\n\n\nGET https://hub.example.com/7jaa86kgdudewiaq0wtu \nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\n\n\n\n\n{\n   \ntimestamp\n:\n2018-01-08T01:40:05.14\n,\n   \nid\n:\nwYXStHqxFQyHFELh\n,\n   \nevent\n:{\n      \nhub.topic\n:\nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n      \ncontext\n:[\n         {\n            \nkey\n:\npatient\n,\n            \nresource\n:{\n               \nresourceType\n:\nPatient\n,\n               \nid\n:\n798E4MyMcpCWHab9\n,\n               \nidentifier\n:[\n                  {\n                     \nsystem\n:\nurn:oid:1.2.840.114350\n,\n                     \nvalue\n:\n1345687\n\n                  },\n                  {\n                     \nsystem\n:\nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n                     \nvalue\n:\n7539\n\n                  }\n               ]\n            }\n         },\n         {\n            \nkey\n:\nencounter\n,\n            \nresource\n:{\n               \nresourceType\n:\nEncounter\n,\n               \nid\n:\necgXt3jVqNNpsXnNXZ3KljA3\n,\n               \nidentifier\n:[\n                  {\n                     \nuse\n:\nusual\n,\n                     \nsystem\n:\nhttp://healthcare.example.org/identifiers/encounter\n,\n                     \nvalue\n:\n1853\n\n                  }\n               ]\n            }\n         },\n         {\n            \nkey\n:\nstudy\n,\n            \nresource\n:{\n               \nresourceType\n:\nImagingStudy\n,\n               \nid\n:\n8i7tbu6fby5ftfbku6fniuf\n,\n               \nuid\n:\nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n               \naccession\n:{\n                  \nuse\n:\nusual\n,\n                  \ntype\n:{\n                     \ncoding\n:[\n                        {\n                           \nsystem\n:\nhttp://hl7.org/fhir/v2/0203\n,\n                           \ncode\n:\nACSN\n\n                        }\n                     ]\n                  }\n               },\n               \nidentifier\n:[\n                  {\n                     \nsystem\n:\n7678\n,\n                     \nvalue\n:\n185444\n\n                  }\n               ]\n            }\n         }\n      ]\n   }\n}\n\n\n\n\nWorkflow event occurs and subscriber is notified\n\n\nIn addition to a description of the subscribed event that just occurred, the notification to the subscriber also includes an ISO 8601 formatted timestamp in UTC and an event identifer that is universally unique for the hub. The timestamp should be used by subscribers to establish message affinity through the use of a message queue. The event identifier should be used to differentiate retried messages from user actions. \n\n\nUsing the hub.secret from the subscription request, the hub MUST generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value MUST be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature MUST be computed using the HMAC algorithm \nRFC6151\n  with the request body as the data and the hub.secret as the key.\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nRequired\n\n\nstring\n\n\nISO 8601 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.\n\n\n\n\n\n\nid\n\n\nRequired\n\n\nstring\n\n\nEvent identifier used to recognize retried notifications. This id MUST be globally unique for the hub, SHOULD be opaque to the subscriber and MAY be a GUID.\n\n\n\n\n\n\nevent\n\n\nRequired\n\n\nobject\n\n\nA json object describing the event. See below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session uri given in the subscription request.\n\n\n\n\n\n\nhub.event\n\n\nRequired\n\n\nstring\n\n\nThe event that triggered this notification, taken from the list of events from the subscription request.\n\n\n\n\n\n\ncontext\n\n\nRequired\n\n\narray\n\n\nAn array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The hub MUST only return FHIR resources that can be accessed with the existing OAuth2 access_token.\n\n\n\n\n\n\n\n\nWhat just happened in the user's session?\n\n\nThe notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog. The context is an array of named FHIR objects (similar to \nCDS Hooks's context\n field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. The context makes heavy use of the \nFHIR _elements parameter\n to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. \n\n\nPOST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n{\n  \ntimestamp\n: \n2018-01-08T01:37:05.14\n,\n  \nid\n: \nq9v3jubddqt63n1\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nopen-patient-chart\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \npatient\n,\n        \nresource\n: {\n          \nresourceType\n: \nPatient\n,\n          \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n          \nidentifier\n: [\n            {\n              \nsystem\n: \nurn:oid:1.2.840.114350\n,\n              \nvalue\n: \n185444\n\n            },\n            {\n              \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n              \nvalue\n: \n2667\n\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nThe subscriber SHOULD respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber responds with an HTTP 200; otherwise, the subscriber SHOULD respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.\n\n\nHTTP/1.1 200 Accepted\n\n\n\n\nApp requests context change\n\n\nSimilar to the Hub's notifications to the subscriber, the subscriber can request context changes by POSTing to the \nhub.topic\n url. The Hub accepts this context change by responding with any successful HTTP status and rejects it by responding with any 4xx or 5xx HTTP status. The subscriber MUST be capable of gracefully handling a rejected context request. \n\n\nOnce a requested context change is accepted, the Hub will broadcast the context notification to all subscribers, including the original requestor. \n\n\nPOST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n  \ntimestamp\n: \n2018-01-08T01:40:05.14\n,\n  \nid\n: \nwYXStHqxFQyHFELh\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nclose-patient-chart\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \npatient\n,\n        \nresource\n: {\n          \nresourceType\n: \nPatient\n,\n          \nid\n: \n798E4MyMcpCWHab9\n,\n          \nidentifier\n: [\n            {\n              \nsystem\n: \nurn:oid:1.2.840.114350\n,\n              \nvalue\n: \n1345687\n\n            },\n            {\n              \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n              \nvalue\n: \n7539\n\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nApp unsubscribes from session\n\n\nNote that this is the same as the subscription request with the single difference that the hub.mode MUST be equal to the string \nunsubscribe\n.\n\n\nPOST https://hub.example.com\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a\nhub.mode=unsubscribe\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.secret=shhh-this-is-a-secret\nhub.events=open-patient-chart,close-patient-chart\n\n\n\n\n\nEvent Catalog\n\n\nEach  event definition in the catalog, below, specifies a single event name, a description of the event, and the  required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber.\n\n\nFHIR is the interoperable data model used by FHIRcast. The fields within \ncontext\n are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the open-image-study event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the __elements_ query parameter, like so:  \nImagingStudy/{id}?_elements=identifier,accession\n and in accordance with the \nFHIR specification\n. \n\n\nA FHIR server may not support the \n_elements\n query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification.\n\n\nopen-patient-chart\n\n\nDescription:\n\n\nUser opened patient's medical record. \n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?\\_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?\\_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nswitch-patient-chart\n\n\nDescription:\n\n\nUser changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?\\_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context..\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?\\_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nclose-patient-chart\n\n\nDescription: User closed patient's medical record.\n\n\nExample:\n\n\n{ }\n\n\n\n\nNo context.\n\n\nopen-imaging-study\n\n\nDescription: User opened record of imaging study.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nswitch-imaging-study\n\n\nDescription: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nclose-imaging-study\n\n\nDescription: User closed imaging study.\n\n\nExample:\n\n\n{\n }\n\n\n\n\nNo context.\n\n\nuser-logout\n\n\nDescription: User gracefully exited the application.\n\n\nExample:\n\n\n{\n}\n\n\nNo Context \n\n\nuser-hibernate\n\n\nDescription: User temporarily suspended her session. The user's session will eventually resume.\n\n\nExample:\n\n\n{\n}\n\n\nNo Context \n\n\nGet involved\n\n\n\n\nLog issues, contribute via github\n\n\nConverse at chat.fhir.org", 
            "title": "Home"
        }, 
        {
            "location": "/#fhircast-modern-simple-application-context-synchronization", 
            "text": "", 
            "title": "FHIRcast - modern, simple application context synchronization"
        }, 
        {
            "location": "/#overview", 
            "text": "FHIRcast synchronizes healthcare applications in real time to show the same clinical content to a common user. For example, a radiologist often works in three disparate applications at the same time (a radiology information system, a PACS and a dictation system), she wants each of these three systems to display the same study or patient at the same time. FHIRcast isn't limited to radiology use-cases. Modeled after the common webhook design pattern and specifically the  W3C WebSub RFC , FHIRcast naturally extends the SMART on FHIR launch protocol to achieve tight integration between disparate, full-featured applications. FHIRcast builds on the  CCOW  abstract model to specify an http-based and simple context synchronization specification that doesn't require a separate context manager.   Adopting the WebSub terminology, the below describes an app as a subscriber synchronizing with an EHR in the role of a hub, but any user-facing application can synchronize with FHIRcast. While less common,  bidirectional communication between multiple applications is also possible.", 
            "title": "Overview"
        }, 
        {
            "location": "/#why", 
            "text": "The large number of vendor-specific or proprietary context synchronization methods in production limit the industry's ability to enhance the very large number of integrations currently in production. In practice, these integrations are decentralized and simple.", 
            "title": "Why?"
        }, 
        {
            "location": "/#synchronize", 
            "text": "An app subscribes to specific workflow events for a given user's session, the subscription is verified and the app is then notified when those workflow events occur; for example, by the clinician opening a patient's chart. The app deletes its subscription when it no longer wants to receive notifications.\n[TODO: Simple, attractive image illustrating actors and key interactions]", 
            "title": "Synchronize"
        }, 
        {
            "location": "/#ehr-launches-smart-on-fhir-app", 
            "text": "The EHR launches the app following the standard  SMART on FHIR EHR launch  flow, including identifying the current EHR user using OpenID Connect. As part of the app launch, in response to a request for the  fhircast  OAuth2.0 scope , the EHR's authorization server identifies the base url to the hub, and a unique, opaque identifier to the current user's session. Other launch scenarios are also supported, see  Launch Scenarios .", 
            "title": "EHR launches SMART on FHIR App"
        }, 
        {
            "location": "/#smart-launch-parameters-include-hub-base-url-and-session-identifier", 
            "text": "{\n   access_token :  i8hweunweunweofiwweoijewiwe ,\n   token_type :  bearer ,\n   expires_in : 3600,\n   patient :   123 ,\n   encounter :  456 ,\n   imagingstudy :  789 ,\n   cast-hub  :  https://hub.example.com ,\n   cast-session :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n}  Although FHIRcast works best with the SMART on FHIR launch and authorization process, it can also be used with implementation-specific launch and authz protocols. See  other launch scenarios .", 
            "title": "SMART launch parameters include hub base url and session identifier"
        }, 
        {
            "location": "/#app-subscribes-to-session", 
            "text": "In this example, the app asks to be notified of the open-patient-chart and close-patient-chart events.  Note that the bearer access_token used to authenticate to the Hub was initially granted during the SMART launch.  Subscriber performs an HTTP POST to the hub base url with the following parameters.     Field  Optionality  Type  Description      hub.callback  Required  string  The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription.    hub.mode  Required  string  The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request.    hub.topic  Required  string  The uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from.    hub.secret  Required  string  A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest delivered in each notification. This parameter MUST be less than 200 bytes in length.    hub.events  Required  string  Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications.    hub.lease_seconds  Optional  number  Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter.     Hubs MUST allow subscribers to re-request subscriptions that are already activated. Each subsequent request to a hub to subscribe or unsubscribe MUST override the previous subscription state for a specific topic, and callback URL combination once the action is verified.   The callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish). Hubs MUST preserve the query string during subscription verification by appending new parameters to the end of the list using the   (ampersand) character to join. When sending the content distribution request, the hub will make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters.  POST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=patient-open-chart,patient-close-chart  Note: Within FHIRcast, the client that creates a subscription and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems.", 
            "title": "App subscribes to session"
        }, 
        {
            "location": "/#hub-responds-with-successful-creation", 
            "text": "If the hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, it MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the hub. The hub SHOULD perform the verification of intent as soon as possible.  If a hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, hubs SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.  HTTP/1.1 202 Accepted", 
            "title": "Hub responds with successful creation"
        }, 
        {
            "location": "/#hub-may-cancel-subscription", 
            "text": "If (and when) the subscription is denied, the hub MUST inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended.     Field  Optionality  Type  Description      hub.mode  Required  string  The literal string \"denied\".    hub.topic  Required  string  The topic uri given in the corresponding subscription request.    hub.events  Required  string  A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.    hub.reason  Optional  string  The hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.     GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox hub.reason=session+unexpectedly+stopped HTTP 1.1\nHost: subscriber", 
            "title": "Hub may cancel subscription"
        }, 
        {
            "location": "/#hub-verifies-callback-url", 
            "text": "If (and when) the subscription is accepted, the hub MUST perform the verification of intent of the subscriber. The hub.callback url verification process ensures that the subscriber actually controls the callback url.  In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a hub must ensure that the subscriber did indeed send the subscription request. The hub verifies a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended:     Field  Optionality  Type  Description      hub.mode  Required  string  The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber.    hub.topic  Required  string  The topic session uri given in the corresponding subscription request.    hub.events  Required  string  A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.    hub.challenge  Required  string  A hub-generated, random string that MUST be echoed by the subscriber to verify the subscription.    hub.lease_seconds  Required  number  The hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the hub to the subscriber. Subscribers must renew their subscription before the lease seconds period is over to avoid interruption.     GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox HTTP 1.1\nHost: subscriber  The subscriber MUST confirm that the hub.topic corresponds to a pending subscription or unsubscription that it wishes to carry out. If so, the subscriber MUST respond with an HTTP success (2xx) code with a response body equal to the hub.challenge parameter. If the subscriber does not agree with the action, the subscriber MUST respond with a 404 \"Not Found\" response.  HTTP/1.1 200 Success\nContent-Type: text/html\n\nmeu3we944ix80ox  The hub MUST consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the hub.challenge parameter, the hub MUST also consider verification to have failed.", 
            "title": "Hub verifies callback url"
        }, 
        {
            "location": "/#app-may-request-current-context", 
            "text": "Following a launch, in addition to subscribing for future events, a client may request the current context of a given session. The client queries the Hub's topic url to check the current context for the session represented by the topic. Event-driven context notifications should take precedence. Note that no  hub.event  is present in the response.  GET https://hub.example.com/7jaa86kgdudewiaq0wtu \nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe  {\n    timestamp : 2018-01-08T01:40:05.14 ,\n    id : wYXStHqxFQyHFELh ,\n    event :{\n       hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n       context :[\n         {\n             key : patient ,\n             resource :{\n                resourceType : Patient ,\n                id : 798E4MyMcpCWHab9 ,\n                identifier :[\n                  {\n                      system : urn:oid:1.2.840.114350 ,\n                      value : 1345687 \n                  },\n                  {\n                      system : urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n                      value : 7539 \n                  }\n               ]\n            }\n         },\n         {\n             key : encounter ,\n             resource :{\n                resourceType : Encounter ,\n                id : ecgXt3jVqNNpsXnNXZ3KljA3 ,\n                identifier :[\n                  {\n                      use : usual ,\n                      system : http://healthcare.example.org/identifiers/encounter ,\n                      value : 1853 \n                  }\n               ]\n            }\n         },\n         {\n             key : study ,\n             resource :{\n                resourceType : ImagingStudy ,\n                id : 8i7tbu6fby5ftfbku6fniuf ,\n                uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n                accession :{\n                   use : usual ,\n                   type :{\n                      coding :[\n                        {\n                            system : http://hl7.org/fhir/v2/0203 ,\n                            code : ACSN \n                        }\n                     ]\n                  }\n               },\n                identifier :[\n                  {\n                      system : 7678 ,\n                      value : 185444 \n                  }\n               ]\n            }\n         }\n      ]\n   }\n}", 
            "title": "App may request current context"
        }, 
        {
            "location": "/#workflow-event-occurs-and-subscriber-is-notified", 
            "text": "In addition to a description of the subscribed event that just occurred, the notification to the subscriber also includes an ISO 8601 formatted timestamp in UTC and an event identifer that is universally unique for the hub. The timestamp should be used by subscribers to establish message affinity through the use of a message queue. The event identifier should be used to differentiate retried messages from user actions.   Using the hub.secret from the subscription request, the hub MUST generate an HMAC signature of the payload and include that signature in the request headers of the notification. The X-Hub-Signature header's value MUST be in the form method=signature where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature MUST be computed using the HMAC algorithm  RFC6151   with the request body as the data and the hub.secret as the key.     Field  Optionality  Type  Description      timestamp  Required  string  ISO 8601 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.    id  Required  string  Event identifier used to recognize retried notifications. This id MUST be globally unique for the hub, SHOULD be opaque to the subscriber and MAY be a GUID.    event  Required  object  A json object describing the event. See below.        Field  Optionality  Type  Description      hub.topic  Required  string  The topic session uri given in the subscription request.    hub.event  Required  string  The event that triggered this notification, taken from the list of events from the subscription request.    context  Required  array  An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The hub MUST only return FHIR resources that can be accessed with the existing OAuth2 access_token.", 
            "title": "Workflow event occurs and subscriber is notified"
        }, 
        {
            "location": "/#what-just-happened-in-the-users-session", 
            "text": "The notification's hub.event and context fields inform the subscriber of the current state of the user's session. The hub.event is a user workflow event, from the Event Catalog. The context is an array of named FHIR objects (similar to  CDS Hooks's context  field) that describe the current content of the user's session. Each event in the Event Catalog defines what context is expected in the notification. The context makes heavy use of the  FHIR _elements parameter  to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations.   POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n{\n   timestamp :  2018-01-08T01:37:05.14 ,\n   id :  q9v3jubddqt63n1 ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  open-patient-chart ,\n     context : [\n      {\n         key :  patient ,\n         resource : {\n           resourceType :  Patient ,\n           id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n           identifier : [\n            {\n               system :  urn:oid:1.2.840.114350 ,\n               value :  185444 \n            },\n            {\n               system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n               value :  2667 \n            }\n          ]\n        }\n      }\n    ]\n  }\n}  The subscriber SHOULD respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber responds with an HTTP 200; otherwise, the subscriber SHOULD respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.  HTTP/1.1 200 Accepted", 
            "title": "What just happened in the user's session?"
        }, 
        {
            "location": "/#app-requests-context-change", 
            "text": "Similar to the Hub's notifications to the subscriber, the subscriber can request context changes by POSTing to the  hub.topic  url. The Hub accepts this context change by responding with any successful HTTP status and rejects it by responding with any 4xx or 5xx HTTP status. The subscriber MUST be capable of gracefully handling a rejected context request.   Once a requested context change is accepted, the Hub will broadcast the context notification to all subscribers, including the original requestor.   POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n   timestamp :  2018-01-08T01:40:05.14 ,\n   id :  wYXStHqxFQyHFELh ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  close-patient-chart ,\n     context : [\n      {\n         key :  patient ,\n         resource : {\n           resourceType :  Patient ,\n           id :  798E4MyMcpCWHab9 ,\n           identifier : [\n            {\n               system :  urn:oid:1.2.840.114350 ,\n               value :  1345687 \n            },\n            {\n               system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n               value :  7539 \n            }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "App requests context change"
        }, 
        {
            "location": "/#app-unsubscribes-from-session", 
            "text": "Note that this is the same as the subscription request with the single difference that the hub.mode MUST be equal to the string  unsubscribe .  POST https://hub.example.com\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=open-patient-chart,close-patient-chart", 
            "title": "App unsubscribes from session"
        }, 
        {
            "location": "/#event-catalog", 
            "text": "Each  event definition in the catalog, below, specifies a single event name, a description of the event, and the  required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber.  FHIR is the interoperable data model used by FHIRcast. The fields within  context  are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the open-image-study event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the __elements_ query parameter, like so:   ImagingStudy/{id}?_elements=identifier,accession  and in accordance with the  FHIR specification .   A FHIR server may not support the  _elements  query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification.", 
            "title": "Event Catalog"
        }, 
        {
            "location": "/#open-patient-chart", 
            "text": "", 
            "title": "open-patient-chart"
        }, 
        {
            "location": "/#description", 
            "text": "User opened patient's medical record.", 
            "title": "Description:"
        }, 
        {
            "location": "/#example", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?\\_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    encounter  Optional  Encounter/{id}?\\_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/#switch-patient-chart", 
            "text": "", 
            "title": "switch-patient-chart"
        }, 
        {
            "location": "/#description_1", 
            "text": "User changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.", 
            "title": "Description:"
        }, 
        {
            "location": "/#example_1", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?\\_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context..    encounter  Optional  Encounter/{id}?\\_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/#close-patient-chart", 
            "text": "", 
            "title": "close-patient-chart"
        }, 
        {
            "location": "/#description-user-closed-patients-medical-record", 
            "text": "", 
            "title": "Description: User closed patient's medical record."
        }, 
        {
            "location": "/#example_2", 
            "text": "{ }  No context.", 
            "title": "Example:"
        }, 
        {
            "location": "/#open-imaging-study", 
            "text": "", 
            "title": "open-imaging-study"
        }, 
        {
            "location": "/#description-user-opened-record-of-imaging-study", 
            "text": "", 
            "title": "Description: User opened record of imaging study."
        }, 
        {
            "location": "/#example_3", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/#switch-imaging-study", 
            "text": "", 
            "title": "switch-imaging-study"
        }, 
        {
            "location": "/#description-user-changed-from-one-open-imaging-study-to-another-previously-opened-imaging-study-the-context-documents-the-study-and-optionally-patient-for-the-currently-open-record", 
            "text": "", 
            "title": "Description: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record."
        }, 
        {
            "location": "/#example_4", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/#close-imaging-study", 
            "text": "", 
            "title": "close-imaging-study"
        }, 
        {
            "location": "/#description-user-closed-imaging-study", 
            "text": "", 
            "title": "Description: User closed imaging study."
        }, 
        {
            "location": "/#example_5", 
            "text": "{\n }  No context.", 
            "title": "Example:"
        }, 
        {
            "location": "/#user-logout", 
            "text": "", 
            "title": "user-logout"
        }, 
        {
            "location": "/#description-user-gracefully-exited-the-application", 
            "text": "", 
            "title": "Description: User gracefully exited the application."
        }, 
        {
            "location": "/#example_6", 
            "text": "{\n}  No Context", 
            "title": "Example:"
        }, 
        {
            "location": "/#user-hibernate", 
            "text": "", 
            "title": "user-hibernate"
        }, 
        {
            "location": "/#description-user-temporarily-suspended-her-session-the-users-session-will-eventually-resume", 
            "text": "", 
            "title": "Description: User temporarily suspended her session. The user's session will eventually resume."
        }, 
        {
            "location": "/#example_7", 
            "text": "{\n}  No Context", 
            "title": "Example:"
        }, 
        {
            "location": "/#get-involved", 
            "text": "Log issues, contribute via github  Converse at chat.fhir.org", 
            "title": "Get involved"
        }, 
        {
            "location": "/launch-scenarios/", 
            "text": "EHR authorizes app to synchronize\n\n\nFHIRcast extends SMART on FHIR to support clinical context synchronization between disparate, full featured healthcare which cannot be embedded within one another. Two launch scenarios are supported. In all cases the app is authorized to synchronize to a user's session using the OAuth2.0 \nfhircast\n scope.\n\n\nDuring the OAuth2.0 handshake, the app \nrequests and is granted\n the \nfhircast\n scope. The EHR's authorization server returns the hub url and any relevant session topics as SMART launch parameters. \n\n\n\n\n\n\n\n\nSMART launch parameter\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncast-hub\n\n\nRequired\n\n\nstring\n\n\nThe base url of the EHR's hub.\n\n\n\n\n\n\ncast-session\n\n\nOptional\n\n\nstring or array\n\n\nZero, one or more session topic urls. The cast-session url is a unique, opaque identifier to the a user's session.\n\n\n\n\n\n\n\n\nThe app requests the \nfhircast\n scope.\n\n\nLocation: https://ehr/authorize?\n            response_type=code\n\n            client_id=app-client-id\n\n            redirect_uri=https%3A%2F%2Fapp%2Fafter-auth\n\n            launch=xyz123\n\n            scope=fhircast+launch+patient%2FObservation.read+patient%2FPatient.read+openid+profile\n\n            state=98wrghuwuogerg97\n\n            aud=https://ehr/fhir\n\n\n\n\nFollowing the OAuth2.0 handshake, the authorization server returns the FHIRcast SMART launch parameters alongside the access_token.\n\n\n{\n  \naccess_token\n: \ni8hweunweunweofiwweoijewiwe\n,\n  \ntoken_type\n: \nbearer\n,\n  \nexpires_in\n: 3600,\n  \nscope\n: \npatient/Observation.read patient/Patient.read\n,\n  \nstate\n: \n98wrghuwuogerg97\n,\n  \nintent\n: \nclient-ui-name\n,\n  \npatient\n:  \n123\n,\n  \nencounter\n: \n456\n,\n  \ncast-hub\n : \nhttps://hub.example.com\n,\n  \ncast-session\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n\n}\n\n\n\n\nThe app then \nsubscribes\n to the identified session\n\n\nTwo different launch scenarios are supported. For each launch scenario, the app discovers the session topic to which it \nsubscribes\n.\n\n\nEHR Launch: User SSO's into app from EHR\n\n\nThe simplest launch scenario is the \nSMART on FHIR EHR launch\n, in which the app is launched from an authenticated EHR session. The app receives information about the user and session as part of the launch and subsequently subscribes to the launching user's session. \n\n\nIn this scenario, the EHR authorizes the app to synchronize. The EHR provides one or more session topics as SMART launch parameters that belong to the EHR's current user. \n\n\nStandalone launch: User authenticates to EHR to authorize synchronization\n\n\nIf the app can't be launched from the EHR, for example, it's opening on a different machine, it can use the standard \nSMART on FHIR standalone launch\n. \n\n\nIn this scenario, the user authorizes the app to synchronize to her session by authenticating to the EHR's authorization server. The EHR provides one or more session topics as SMART launch parameters that belong to the authorizing user.", 
            "title": "Launch Scenarios"
        }, 
        {
            "location": "/launch-scenarios/#ehr-authorizes-app-to-synchronize", 
            "text": "FHIRcast extends SMART on FHIR to support clinical context synchronization between disparate, full featured healthcare which cannot be embedded within one another. Two launch scenarios are supported. In all cases the app is authorized to synchronize to a user's session using the OAuth2.0  fhircast  scope.  During the OAuth2.0 handshake, the app  requests and is granted  the  fhircast  scope. The EHR's authorization server returns the hub url and any relevant session topics as SMART launch parameters.      SMART launch parameter  Optionality  Type  Description      cast-hub  Required  string  The base url of the EHR's hub.    cast-session  Optional  string or array  Zero, one or more session topic urls. The cast-session url is a unique, opaque identifier to the a user's session.     The app requests the  fhircast  scope.  Location: https://ehr/authorize?\n            response_type=code \n            client_id=app-client-id \n            redirect_uri=https%3A%2F%2Fapp%2Fafter-auth \n            launch=xyz123 \n            scope=fhircast+launch+patient%2FObservation.read+patient%2FPatient.read+openid+profile \n            state=98wrghuwuogerg97 \n            aud=https://ehr/fhir  Following the OAuth2.0 handshake, the authorization server returns the FHIRcast SMART launch parameters alongside the access_token.  {\n   access_token :  i8hweunweunweofiwweoijewiwe ,\n   token_type :  bearer ,\n   expires_in : 3600,\n   scope :  patient/Observation.read patient/Patient.read ,\n   state :  98wrghuwuogerg97 ,\n   intent :  client-ui-name ,\n   patient :   123 ,\n   encounter :  456 ,\n   cast-hub  :  https://hub.example.com ,\n   cast-session :  https://hub.example.com/7jaa86kgdudewiaq0wtu \n}  The app then  subscribes  to the identified session  Two different launch scenarios are supported. For each launch scenario, the app discovers the session topic to which it  subscribes .", 
            "title": "EHR authorizes app to synchronize"
        }, 
        {
            "location": "/launch-scenarios/#ehr-launch-user-ssos-into-app-from-ehr", 
            "text": "The simplest launch scenario is the  SMART on FHIR EHR launch , in which the app is launched from an authenticated EHR session. The app receives information about the user and session as part of the launch and subsequently subscribes to the launching user's session.   In this scenario, the EHR authorizes the app to synchronize. The EHR provides one or more session topics as SMART launch parameters that belong to the EHR's current user.", 
            "title": "EHR Launch: User SSO's into app from EHR"
        }, 
        {
            "location": "/launch-scenarios/#standalone-launch-user-authenticates-to-ehr-to-authorize-synchronization", 
            "text": "If the app can't be launched from the EHR, for example, it's opening on a different machine, it can use the standard  SMART on FHIR standalone launch .   In this scenario, the user authorizes the app to synchronize to her session by authenticating to the EHR's authorization server. The EHR provides one or more session topics as SMART launch parameters that belong to the authorizing user.", 
            "title": "Standalone launch: User authenticates to EHR to authorize synchronization"
        }, 
        {
            "location": "/security-considerations/", 
            "text": "Security Considerations\n\n\nFHIRcast enables the synchronization of healthcare applications user interfaces in real-time through the exchange of a workflow event to a small number of disparate applications. The notification message which describes the workflow event is a simple json wrapper around one or more FHIR resources. These FHIR resources can contain PHI. \n\n\nActors\n\n\n\n\nSubscribing app\n\n\nHub\n\n\nAuthorization Server\n\n\nResource server\n\n\n\n\nFHIRcast ties SMART as the authnz layer together with WebSub for subscription and event notification.\n\n\nSources of Risk\n\n\n\n\nThe FHIRcast Hub pushes PII to a dynamic url specified by the authenticated app. \n\n\nAn app's credentials or a Hub's lack of authentication could be used by a malicious system to control the user's session.\n\n\n\n\nSMART on FHIR\n\n\nSMART on FHIR\n profiles \nOAuth 2.0's authorization code grant type\n and extends it by introducing an \"\nEHR Launch Sequence\n\". The Argonaut Project performed a formal security review of SMART on FHIR, resulting in a \nRisk Assessment report\n.\n\n\nFHIRcast builds on SMART by introducing a new, standard OAuth 2.0 scope of \nfhircast\n, as well as two new SMART launch parameters of \ncast-hub\n and \ncast-session\n. \n\n\n\n\nHL7 SMART on FHIR specification\n\n\nArgonaut Risk Assessment report\n.\n\n\nOAuth 2.0 Threat Model and Security Considerations\n\n\n\n\nHTTP Web Hooks using WebSub\n\n\nWebSub\n is a W3C RFC designed for the distribution of web content through a standardized web hooks architecture. FHIRcast uses WebSub to allow clients to subscribe and unsubscribe to the Hub and, for the Hub to notify subscribers of events. \n\n\nUnlike WebSub, FHIRcast requires that both the Hub and the subscribing apps endpoints are exposed over https.\n\n\nThe below \nflow diagram\n illustrates each of the interactions. \n\n\n\n\nHow does the subscriber authenticate to the Hub?\n\n\nThe subscribing app can make four distinct API calls to the Hub. For each of these calls, the subscribing app authenticates to the Hub with the Hub's authorization server issued SMART access_token. Per SMART on FHIR, this access_token is presented to the Hub in the HTTP Authorization header.\n\n\n\n\nApp subscribes to Hub\n\n\nApp requests change to shared context\n\n\nApp requests current context\n\n\nApp unsubscribes from session\n\n\n\n\nPOST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\n\n\n\n\nHow does the Hub validate the subscriber?\n\n\nThe Hub can make three distinct API calls to the subscribing app's \nhub.callback\n url. \n\n\n\n\nHub verifies callback url with app\n\n\nHub notifies app of event\n\n\nHub denies subscription\n\n\n\n\nThis \nflow diagram\n describes the actors and actions. \n\n\n\n\nThe \nsubscribing app initiates\n the FHIRcast subscription, authenticating to the Hub with its bearer token, and providing the \nhub.secret\n and \nhub.callback\n url. The Hub verifies intent and ownership by performing an HTTP GET to the \nhub.callback\n url, with a \nhub.challenge\n. The subscribing app must echo the \nhub.challenge\n in the body of an HTTP 202 response. Once a workflow event occurs, the Hub notifies the app of the event by POSTing to the subscribing app's \nhub.callback\n url. The Hub provides an \nHMAC signature\n of the previously provided \nhub.secret\n in the \nX-Hub-Signature\n HTTP header.\n\n\nPOST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n\n\n\nWebSub Security Considerations\n\n\nThe WebSub RFC defines \nspecific security considerations\n, including the below, which are listed here for emphasis or elevation from optional to mandatory.\n\n Subscribers must communicate with a Hub over https.\n\n Hub must reject unsecured http callback urls. \n\n The subscribing app's \nhub.callback\n url should be unique and unguessable. \n\n Subscribing apps must provide a hub.secret and validate the \nX-Hub-Signature\n in the notification message.\n\n Hubs must reject subscriptions if the callback url does not echo the \nhub.challenge\n as part of the intent verification GET.\n\n When computing the HMAC digest with the \nhub.secret\n for the \nX-Hub-Signature\n HTTP header, Hubs must use SHA-256 or greater and must not use SHA-1.\n* For each subscription, the \nhub.secret\n must be unique, unguessable and securely stored by both the Hub and the app. \n\n\n\n\nW3C WebSub RFC\n\n\nW3C WebSub RFC's Security Considerations\n\n\nHMAC RFC 6151\n\n\n\n\nExperimental Websockets support\n\n\nIn addition to the web hooks communication pattern, the FHIRcast community is experimenting with the use of websockets for event notification. Below are some incomplete considerations for a potential websockets implementation.\n\n\nSubscribers SHOULD only use and Hub's SHOULD only accept connections made over the secure \nwss://\n websocket protocol and not the unsecured \nws://\n websocket protocol.\n\n\nThe WebSockets standard defines an \nOrigin\n header, sent from the client to the server and intended to contain the url of the client. Subscribers using websockets may be running in a browser, in which case the browser enforces origin reporting to the Hub, or native apps in which the origin reported to the Hub can not be trusted. Therefore, a Hub exposing a websocket connection MUST not rely upon the origin sent by the subscriber. \n\n\nWhile native app subscribers can send any standard HTTP headers, notably including \nAuthorization: Bearer\n, browser-based subscribers are limited to only HTTP Basic Auth or cookies. Therefore, the typical use of the OAuth2.0 access_token for bearer authentication does not consistently work with websockets. FHIRcast describes a \"ticket\"-based authentication system, in which the \ncast-session\n url provided to the subscriber as part of the secured SMART app launch serves not only as a unique session identifier, but also as an \"authorization ticket\". This authorization ticket effectively acts as a bearer token. The Hub should therefore take care to generate opaque and unique \ncast-session\n values. \n\n\n\n\nThe WebSocket Protocol RFC 6455\n\n\nHeroku's excellent explanation of websocket security", 
            "title": "Security Considerations"
        }, 
        {
            "location": "/security-considerations/#security-considerations", 
            "text": "FHIRcast enables the synchronization of healthcare applications user interfaces in real-time through the exchange of a workflow event to a small number of disparate applications. The notification message which describes the workflow event is a simple json wrapper around one or more FHIR resources. These FHIR resources can contain PHI.", 
            "title": "Security Considerations"
        }, 
        {
            "location": "/security-considerations/#actors", 
            "text": "Subscribing app  Hub  Authorization Server  Resource server   FHIRcast ties SMART as the authnz layer together with WebSub for subscription and event notification.", 
            "title": "Actors"
        }, 
        {
            "location": "/security-considerations/#sources-of-risk", 
            "text": "The FHIRcast Hub pushes PII to a dynamic url specified by the authenticated app.   An app's credentials or a Hub's lack of authentication could be used by a malicious system to control the user's session.", 
            "title": "Sources of Risk"
        }, 
        {
            "location": "/security-considerations/#smart-on-fhir", 
            "text": "SMART on FHIR  profiles  OAuth 2.0's authorization code grant type  and extends it by introducing an \" EHR Launch Sequence \". The Argonaut Project performed a formal security review of SMART on FHIR, resulting in a  Risk Assessment report .  FHIRcast builds on SMART by introducing a new, standard OAuth 2.0 scope of  fhircast , as well as two new SMART launch parameters of  cast-hub  and  cast-session .    HL7 SMART on FHIR specification  Argonaut Risk Assessment report .  OAuth 2.0 Threat Model and Security Considerations", 
            "title": "SMART on FHIR"
        }, 
        {
            "location": "/security-considerations/#http-web-hooks-using-websub", 
            "text": "WebSub  is a W3C RFC designed for the distribution of web content through a standardized web hooks architecture. FHIRcast uses WebSub to allow clients to subscribe and unsubscribe to the Hub and, for the Hub to notify subscribers of events.   Unlike WebSub, FHIRcast requires that both the Hub and the subscribing apps endpoints are exposed over https.  The below  flow diagram  illustrates each of the interactions.", 
            "title": "HTTP Web Hooks using WebSub"
        }, 
        {
            "location": "/security-considerations/#how-does-the-subscriber-authenticate-to-the-hub", 
            "text": "The subscribing app can make four distinct API calls to the Hub. For each of these calls, the subscribing app authenticates to the Hub with the Hub's authorization server issued SMART access_token. Per SMART on FHIR, this access_token is presented to the Hub in the HTTP Authorization header.   App subscribes to Hub  App requests change to shared context  App requests current context  App unsubscribes from session   POST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe", 
            "title": "How does the subscriber authenticate to the Hub?"
        }, 
        {
            "location": "/security-considerations/#how-does-the-hub-validate-the-subscriber", 
            "text": "The Hub can make three distinct API calls to the subscribing app's  hub.callback  url.    Hub verifies callback url with app  Hub notifies app of event  Hub denies subscription   This  flow diagram  describes the actors and actions.    The  subscribing app initiates  the FHIRcast subscription, authenticating to the Hub with its bearer token, and providing the  hub.secret  and  hub.callback  url. The Hub verifies intent and ownership by performing an HTTP GET to the  hub.callback  url, with a  hub.challenge . The subscribing app must echo the  hub.challenge  in the body of an HTTP 202 response. Once a workflow event occurs, the Hub notifies the app of the event by POSTing to the subscribing app's  hub.callback  url. The Hub provides an  HMAC signature  of the previously provided  hub.secret  in the  X-Hub-Signature  HTTP header.  POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae", 
            "title": "How does the Hub validate the subscriber?"
        }, 
        {
            "location": "/security-considerations/#websub-security-considerations", 
            "text": "The WebSub RFC defines  specific security considerations , including the below, which are listed here for emphasis or elevation from optional to mandatory.  Subscribers must communicate with a Hub over https.  Hub must reject unsecured http callback urls.   The subscribing app's  hub.callback  url should be unique and unguessable.   Subscribing apps must provide a hub.secret and validate the  X-Hub-Signature  in the notification message.  Hubs must reject subscriptions if the callback url does not echo the  hub.challenge  as part of the intent verification GET.  When computing the HMAC digest with the  hub.secret  for the  X-Hub-Signature  HTTP header, Hubs must use SHA-256 or greater and must not use SHA-1.\n* For each subscription, the  hub.secret  must be unique, unguessable and securely stored by both the Hub and the app.    W3C WebSub RFC  W3C WebSub RFC's Security Considerations  HMAC RFC 6151", 
            "title": "WebSub Security Considerations"
        }, 
        {
            "location": "/security-considerations/#experimental-websockets-support", 
            "text": "In addition to the web hooks communication pattern, the FHIRcast community is experimenting with the use of websockets for event notification. Below are some incomplete considerations for a potential websockets implementation.  Subscribers SHOULD only use and Hub's SHOULD only accept connections made over the secure  wss://  websocket protocol and not the unsecured  ws://  websocket protocol.  The WebSockets standard defines an  Origin  header, sent from the client to the server and intended to contain the url of the client. Subscribers using websockets may be running in a browser, in which case the browser enforces origin reporting to the Hub, or native apps in which the origin reported to the Hub can not be trusted. Therefore, a Hub exposing a websocket connection MUST not rely upon the origin sent by the subscriber.   While native app subscribers can send any standard HTTP headers, notably including  Authorization: Bearer , browser-based subscribers are limited to only HTTP Basic Auth or cookies. Therefore, the typical use of the OAuth2.0 access_token for bearer authentication does not consistently work with websockets. FHIRcast describes a \"ticket\"-based authentication system, in which the  cast-session  url provided to the subscriber as part of the secured SMART app launch serves not only as a unique session identifier, but also as an \"authorization ticket\". This authorization ticket effectively acts as a bearer token. The Hub should therefore take care to generate opaque and unique  cast-session  values.    The WebSocket Protocol RFC 6455  Heroku's excellent explanation of websocket security", 
            "title": "Experimental Websockets support"
        }, 
        {
            "location": "/about/", 
            "text": "About FHIRcast\n\n\nFHIRcast is an HL7 specification designed to provide a lightweight, inexpensive and http-based application context synchronization standard.  \n\n\nGet involved\n\n\nThere are several ways in which you can get involved with the FHIRcast community.\n\n\n\n\nLog issues, contribute via github\n\n\nConverse at chat.fhir.org\n\n\n\n\nWant to help build our test infrastructure?\n\n\n\n\nhelp-wanted issues\n\n\nMilestones", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-fhircast", 
            "text": "FHIRcast is an HL7 specification designed to provide a lightweight, inexpensive and http-based application context synchronization standard.", 
            "title": "About FHIRcast"
        }, 
        {
            "location": "/about/#get-involved", 
            "text": "There are several ways in which you can get involved with the FHIRcast community.   Log issues, contribute via github  Converse at chat.fhir.org", 
            "title": "Get involved"
        }, 
        {
            "location": "/about/#want-to-help-build-our-test-infrastructure", 
            "text": "help-wanted issues  Milestones", 
            "title": "Want to help build our test infrastructure?"
        }
    ]
}